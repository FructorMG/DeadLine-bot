import csv
from datetime import datetime
import asyncio
from aiogram import Bot
from config import BOT_TOKEN, CHAT_ID
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class BirthdayManager:
    def __init__(self, csv_file='birthdays.csv'):
        self.csv_file = csv_file

    def get_today_birthdays(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è."""
        today = datetime.now().strftime("%d.%m")
        birthdays_today = []
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –¥–∞—Ç—É: {today}")
        try:
            with open(self.csv_file, encoding='utf-8') as csvfile:
                reader = csv.DictReader(csvfile)
                for row in reader:
                    fio = row.get('fio')
                    bdate = row.get('bdate')
                    if bdate == today:
                        birthdays_today.append(fio)
        except FileNotFoundError:
            logging.error(f"–§–∞–π–ª {self.csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            raise
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {self.csv_file}: {e}")
            raise
        return birthdays_today
class TelegramBot:
    def __init__(self, token, chat_id, birthday_manager):
        self.bot = Bot(token=token)
        self.chat_id = chat_id
        self.birthday_manager = birthday_manager

    async def send_message(self, message):
        try:
            await self.bot.send_message(self.chat_id, message)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    async def send_start_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
        message = "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        await self.send_message(message)
        logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    async def notify_birthdays(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è."""
        try:
            birthdays_today = self.birthday_manager.get_today_birthdays()
        except FileNotFoundError:
            await self.send_message("‚ùå –§–∞–π–ª birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        except Exception as e:
            await self.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return

        if birthdays_today:
            for fio in birthdays_today:
                message = f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {fio}! üéÇ"
                await self.send_message(message)
        else:
            logging.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
        await self.send_start_message()
        while True:
            await self.notify_birthdays()
            await asyncio.sleep(24 * 60 * 60)  # –ñ–¥–µ—Ç 24 —á–∞—Å–∞

async def main():
    birthday_manager = BirthdayManager()
    telegram_bot = TelegramBot(token=BOT_TOKEN, chat_id=CHAT_ID, birthday_manager=birthday_manager)
    await telegram_bot.run()


if __name__ == "__main__":
    asyncio.run(main())
