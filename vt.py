import csv
from datetime import datetime
import asyncio
from aiogram import Bot
from config import BOT_TOKEN, CHAT_ID
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)

async def check_deadlines():
    today = datetime.now().strftime("%d.%m")
    birthdays_today = []
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–∞ –¥–∞—Ç—É: {today}")

    try:
        with open('birthdays.csv', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                fio = row.get('fio')
                bdate = row.get('bdate')
                if bdate == today:
                    birthdays_today.append(fio)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await bot.send_message(CHAT_ID, "‚ùå –§–∞–π–ª birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await bot.send_message(CHAT_ID, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    if birthdays_today:
        for fio in birthdays_today:
            message = f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {fio}! üéÇ"
            await bot.send_message(CHAT_ID, message)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è: {fio}")
    else:
        logging.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.")

async def send_start_message():
    await bot.send_message(CHAT_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def main():
    await send_start_message()
    while True:
        await check_deadlines()
        # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (24 —á–∞—Å–∞)
        await asyncio.sleep(24 * 60 * 60)

if __name__ == "__main__":
    asyncio.run(main())
