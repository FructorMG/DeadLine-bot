import logging
import asyncio
from datetime import timedelta
import logging
from bot.bot import bot
from bot.bd import session, User, SuperUser
from bot.Utils.Record_Logs import RecordLogs
from sqlalchemy import extract
from datetime import datetime


logger = logging.getLogger("bot")

async def check_deadlines():
    today = datetime.now()
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –¥–∞—Ç—É: {today.strftime('%d.%m')}")
    try:
        current_month = today.month
        current_day = today.day
        users_with_birthdays = session.query(User).filter(
            extract('month', User.birthday_date) == current_month,
            extract('day', User.birthday_date) == current_day
        ).all()

        if users_with_birthdays:
            recipient_users = session.query(User.user_id).distinct().all()
            recipient_user_ids = {user_id for (user_id,) in recipient_users}

            for user in users_with_birthdays:
                message = f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {user.name}!"
                for recipient_id in recipient_user_ids:
                    await bot.send_message(recipient_id, text=message)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {message}")
        else:
            logger.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è.")

        superusers_with_birthdays = session.query(SuperUser).filter(
            extract('month', SuperUser.birthday_date) == current_month,
            extract('day', SuperUser.birthday_date) == current_day
        ).all()

        if superusers_with_birthdays:
            recipient_superusers = session.query(SuperUser.super_user_id).distinct().all()
            recipient_superuser_ids = {su_id for (su_id,) in recipient_superusers}

            for superuser in superusers_with_birthdays:
                message = f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {superuser.name}!"
                for recipient_id in recipient_superuser_ids:
                    await bot.send_message(recipient_id, text=message)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {message}")
        else:
            logger.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è.")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
        RecordLogs.error_log(None, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")

async def scheduled_check():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
    try:
        users = session.query(User).all()
        for user in users:
            try:
                print("1")
                #await bot.send_message(user.user_id, text="üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤!")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {User.user_id}: {e}")
                RecordLogs.error_log(user.user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        RecordLogs.error_log(User.user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

    while True:
        await check_deadlines()
        now = datetime.now()
        next_run = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        sleep_duration = (next_run - now).total_seconds()
        hours = sleep_duration // 3600
        minutes = (sleep_duration % 3600) // 60
        logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {int(hours)} —á–∞—Å–∞(–æ–≤) –∏ {int(minutes)} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(sleep_duration)