import asyncio
from aiogram import types
from datetime import datetime, timedelta
import logging
from bot.Utils.csv_utils import read_csv_data
from bot.bot import bot
from bot.bd import session, User
from bot.Utils.Record_Logs import RecordLogs

logger = logging.getLogger("bot")

async def check_deadlines():
    today = datetime.now().strftime("%d.%m")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –¥–∞—Ç—É: {today}")
    try:
        birthdays = read_csv_data('birthdays.csv', 'birthdays')
        for entry in birthdays:
            try:
                fio, bdate = entry.split(': ')
                if bdate == today:
                    users = session.query(User).all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if users:
                        message = f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {fio}!"
                        for user in users:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await bot.send_message(user.user_id, text=message)
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {message}")
                    else:
                        logger.warning(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏: {entry}")
                RecordLogs.error_log(user.user_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏')
    except FileNotFoundError:
        logger.error("–§–∞–π–ª birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        RecordLogs.error_log(user.user_id,'–§–∞–π–ª birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")
        RecordLogs.error_log(user.user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤')

async def scheduled_check():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
    try:
        users = session.query(User).all()
        for user in users:
            try:
                await bot.send_message(user.user_id, text="üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤!")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
                RecordLogs.error_log(user.user_id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        RecordLogs.error_log(user.user_id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π')

    while True:
        await check_deadlines()
        now = datetime.now()
        next_run = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        sleep_duration = (next_run - now).total_seconds()
        hours = sleep_duration // 3600
        minutes = (sleep_duration % 3600) // 60
        logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {int(hours)} —á–∞—Å–∞(–æ–≤) –∏ {int(minutes)} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(sleep_duration)
