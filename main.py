import os
import csv
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup
from dotenv import load_dotenv
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
SUPPORT_ID = os.getenv('SUPPORT_ID')
ADMIN_ID = os.getenv('ADMIN_ID')

if not BOT_TOKEN:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not CHAT_ID:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not SUPPORT_ID:
    logger.info("–°–ò–°–¢–ï–ú–ê: –û–¢–°–£–¢–°–í–£–ï–¢ SUPPORT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ")
if not ADMIN_ID:
    logger.info("–°–ò–°–¢–ï–ú–ê: –û–¢–°–£–¢–°–í–£–ï–¢ ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ")
try:
    ADMIN_ID = int(ADMIN_ID)
except (TypeError, ValueError):
    ADMIN_ID = None
    logger.warning("ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot=bot)

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add('–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π').add('–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è').add('–ü–æ–º–æ—â—å')

admin_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
admin_keyboard.add('–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π').add('–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è').add('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

def keyboard_check(message: types.Message):
    if ADMIN_ID and message.from_user.id == ADMIN_ID:
        return admin_keyboard
    else:
        return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start.")
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.", reply_markup = keyboard_check(message))

@dp.message_handler(text='–ü–æ–º–æ—â—å')
async def support(message: types.Message):
    await message.reply(f'–ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å {SUPPORT_ID}.\n',reply_markup = keyboard_check(message))

@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è')
async def add_birthday(message: types.Message):
    # –†–ï–ê–õ–ò–ó–û–í–ê–¢–¨
    await message.reply("–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.", reply_markup = keyboard_check(message))

def read_csv_data(file_path, data_type):
    result = []
    with open(file_path, mode='r', encoding='utf-8') as file:
        reader = csv.reader(file)
        for row in reader:
            if len(row) < 2:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ CSV: {row}")
                continue
            fio = row[0].strip()
            if data_type == 'users':
                username = row[1].strip()
                result.append(f"{fio}: @{username}")
            elif data_type == 'birthdays':
                bdate = row[1].strip()
                result.append(f"{fio}: {bdate}")

    return result

@dp.message_handler(text='–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π')
async def birthdays_list(message: types.Message):
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π.")
    try:
        with open('birthdays.csv', mode='r', encoding='utf-8') as file:
            birthdays = read_csv_data('birthdays.csv', 'birthdays')
        if birthdays:
            await message.reply("–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π:\n" + "\n".join(birthdays), reply_markup = keyboard_check(message))
        else:
            await message.reply("–í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π.", reply_markup = keyboard_check(message))
    except FileNotFoundError:
        await message.reply("–§–∞–π–ª birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup = keyboard_check(message))
        logger.error("–§–∞–π–ª birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup = keyboard_check(message))
        logger.error(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@dp.message_handler(text='–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def users_list(message: types.Message):
    if ADMIN_ID and message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.", reply_markup = keyboard_check(message))
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        f = open('logs.txt', 'a'); f.write(f"WARNING|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"); f.close()
        return
    f = open('logs.txt', 'a'); f.write(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n");f.close()
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    try:
        users = read_csv_data('users.csv', 'users')
        if users:
            await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(users), reply_markup = keyboard_check(message))
        else:
            await message.reply("–í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup = keyboard_check(message))
    except FileNotFoundError:
        await message.reply("–§–∞–π–ª users.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup = keyboard_check(message))
        logger.error("–§–∞–π–ª users.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup = keyboard_check(message))
        logger.error(f"–£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        f = open('logs.txt', 'a'); f.write(f"–£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n"); f.close()

async def check_deadlines():
    today = datetime.now().strftime("%d.%m")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –¥–∞—Ç—É: {today}")
    try:
        with open('birthdays.csv', mode='r', encoding='utf-8') as file:
            reader = csv.reader(file)
            for row in reader:
                if len(row) < 2:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ CSV: {row}")
                    continue
                fio, bdate = row[0].strip(), row[1].strip()
                if bdate == today:
                    message = f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {fio}!"
                    await bot.send_message(CHAT_ID, text=message)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    except FileNotFoundError:
        logger.error("–§–∞–π–ª birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")
        f = open('logs.txt', 'a'); f.write("–§–∞–π–ª birthdays.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"); f.close()
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}\n")
        f = open('logs.txt', 'a'); f.write(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}\n"); f.close()

async def scheduled_check():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
    f = open('logs.txt', 'a'); f.write("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤.\n"); f.close()
    await bot.send_message(CHAT_ID, text="üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–¥–ª–∞–π–Ω–æ–≤!")
    while True:
        await check_deadlines()
        now = datetime.now()
        next_run = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        sleep_duration = (next_run - now).total_seconds()
        hours = sleep_duration // 3600
        minutes = (sleep_duration % 3600) // 60
        logger.info(f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {int(hours)} —á–∞—Å–∞(–æ–≤) –∏ {int(minutes)} –º–∏–Ω—É—Ç.\n")
        await asyncio.sleep(sleep_duration)

async def on_startup(dispatcher):
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ on_startup.")
    asyncio.create_task(scheduled_check())

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
    executor.start_polling(dp, on_startup=on_startup)
